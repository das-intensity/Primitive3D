/*
 * Copyright (c) 2020-2022, NVIDIA CORPORATION.  All rights reserved.
 *
 * NVIDIA CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA CORPORATION is strictly prohibited.
 */

/** @file   program.h
 *  @author Thomas MÃ¼ller, NVIDIA
 */

#pragma once

#ifdef RAY_OPTIX
#include <optix.h>
#include <optix_function_table_definition.h>
#include <optix_stack_size.h>
#include <optix_stubs.h>

// Compiled optix program PTX generated by cmake and wrapped in a C
// header by bin2c.
// namespace optix_ptx {
// 	#include <optix_ptx.h>
// }
#endif  // RAY_OPTIX

#include <Core/common.h>

namespace prim3d {

#define OPTIX_CHECK_THROW(x)                                                      \
    do {                                                                          \
        OptixResult res = x;                                                      \
        if (res != OPTIX_SUCCESS) {                                               \
            throw std::runtime_error(std::string("Optix call '" #x "' failed.")); \
        }                                                                         \
    } while (0)

#define OPTIX_CHECK_THROW_LOG(x)                                           \
    do {                                                                   \
        OptixResult res = x;                                               \
        const size_t sizeof_log_returned = sizeof_log;                     \
        sizeof_log = sizeof(log); /* reset sizeof_log for future calls */  \
        if (res != OPTIX_SUCCESS) {                                        \
            throw std::runtime_error(                                      \
                std::string("Optix call '" #x "' failed. Log:\n") + log +  \
                (sizeof_log_returned == sizeof_log ? "" : "<truncated>")); \
        }                                                                  \
    } while (0)

}  // namespace prim3d
